/**************************************************************/
/*                HOST PACKAGE INSTALLATON                    */
/**************************************************************/

sudo apt-get update

sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential lzop u-boot-tools chrpath socat cpio python python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping libsdl1.2-dev xterm lib32z1 zlib1g net-tools bison flex libssl-dev libncurses5-dev libncursesw5-dev minicom


/**************************************************************/
/*  cross tool-chain installation and settings for linux host */
/**************************************************************/

STEP 1 : Download arm cross toolchain for your Host machine

STEP 2 :  export  path of the cross compilation toolchain. 

export PATH=$PATH:/home/kiran/BBB_Workspace/Downloads/gcc-linaro-6.3.1-2017.02-x86_64_arm-linux-gnueabihf/bin



/**************************************************************/
/*                LINUX COMPILATION STEPS                     */
/**************************************************************/

STEP 1:
/*
 *removes all the temporary folder, object files, images generated 
 *during the previous build. 
 *This step also deletes the .config file if created previously 
 */
make ARCH=arm distclean


STEP 2:
/*creates a .config file by using default config file given by the vendor
 *(here example for BeagelBone Black)*/

make ARCH=arm bb.org_defconfig

note:
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bb.org_defconfig (4.4)
for 4.11 use omap2plus_defconfig


STEP 3:
/*This step is optional. Run this command only if you want to change 
 *some kernel settings before compilation */ ​

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig


STEP 4:
/*Kernel source code compilation. This stage creates a kernel image "uImage" 
 *also all the device tree source files will be compiled, and dtbs will be generated */ ​

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- uImage dtbs LOADADDR=0x80008000 -j4


STEP 5:
/*This step builds and generates in-tree loadable(M) kernel modules(.ko) */

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-  modules  -j4


STEP 6:
/* This step installs all the generated .ko files in the default path of the computer
 * (/lib/modules/<kernel_ver>) */​

sudo make ARCH=arm  modules_install


/**************************************************************/
/*                  U-boot Compilation                        */
/**************************************************************/

STEP 1: distclean : deletes all the previously compiled/generated object files. 

make CROSS_COMPILE=arm-linux-gnueabihf- distclean

STEP 2 : apply board default configuration for uboot

make CROSS_COMPILE=arm-linux-gnueabihf- am335x_boneblack_defconfig


STEP 3 : run menuconfig, if you want to do any settings other than default configuration . 

make CROSS_COMPILE=arm-linux-gnueabihf-  menuconfig


STEP 4 : compile 

make CROSS_COMPILE=arm-linux-gnueabihf- -j4  // -j4(4 core machine) will instruct the make tool to spawn 4 threads
make CROSS_COMPILE=arm-linux-gnueabihf- -j8  // -j8(8 core machine) will instruct the make tool to spawn 8 threads

/**************************************************************/
/*                   Busy box compilation                     */
/**************************************************************/

STEP 1: download busybox 

STEP 2 : Apply default configuration
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- defconfig

STEP 3 : change default settings if you want 
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig

STEP 4 : generate the busy box binary and minimal file system 
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- CONFIG_PREFIX=<install_path> install


/**************************************************************/
/*                    build-root compilation                  */
/**************************************************************/

1) download the build root package from 

https://buildroot.org/

2) configure the build root 


/**************************************************************/
/*                      Dropbear compilation                  */
/**************************************************************/

1) Download Dropbear 

2) Configure Dropbear

./configure --host=arm-linux-gnueabihf --disable-zlib --prefix=/home/kiran/BBB_Workspace/dropbear CC=arm-linux-gnueabihf-gcc

3) compile the Dropbear as static 

make PROGRAMS="dropbear dropbearkey dbclient scp" STATIC=1

4) install dropbear generated binaries 
make PROGRAMS="dropbear dropbearkey dbclient scp" install


5) generate RSA and DSS keys 
dropbearkey -t dss -f dropbear_dss_host_key
dropbearkey -t rsa -f dropbear_rsa_host_key

6) run the dropbear 
# dropbear

7) make a SSh connection from pc 
ssh -l root 192.168.7.2